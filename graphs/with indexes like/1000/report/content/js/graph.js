/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 3049.0, "series": [{"data": [[0.0, 2.0], [0.1, 5.0], [0.2, 7.0], [0.3, 9.0], [0.4, 12.0], [0.5, 21.0], [0.6, 30.0], [0.7, 38.0], [0.8, 45.0], [0.9, 52.0], [1.0, 57.0], [1.1, 61.0], [1.2, 64.0], [1.3, 67.0], [1.4, 69.0], [1.5, 71.0], [1.6, 72.0], [1.7, 74.0], [1.8, 76.0], [1.9, 77.0], [2.0, 79.0], [2.1, 80.0], [2.2, 81.0], [2.3, 83.0], [2.4, 84.0], [2.5, 85.0], [2.6, 87.0], [2.7, 89.0], [2.8, 90.0], [2.9, 92.0], [3.0, 93.0], [3.1, 95.0], [3.2, 97.0], [3.3, 98.0], [3.4, 100.0], [3.5, 102.0], [3.6, 104.0], [3.7, 106.0], [3.8, 109.0], [3.9, 111.0], [4.0, 113.0], [4.1, 115.0], [4.2, 118.0], [4.3, 122.0], [4.4, 125.0], [4.5, 128.0], [4.6, 131.0], [4.7, 135.0], [4.8, 138.0], [4.9, 140.0], [5.0, 144.0], [5.1, 147.0], [5.2, 151.0], [5.3, 154.0], [5.4, 158.0], [5.5, 162.0], [5.6, 166.0], [5.7, 171.0], [5.8, 175.0], [5.9, 181.0], [6.0, 187.0], [6.1, 192.0], [6.2, 198.0], [6.3, 206.0], [6.4, 214.0], [6.5, 221.0], [6.6, 232.0], [6.7, 241.0], [6.8, 253.0], [6.9, 264.0], [7.0, 281.0], [7.1, 297.0], [7.2, 320.0], [7.3, 354.0], [7.4, 373.0], [7.5, 381.0], [7.6, 386.0], [7.7, 390.0], [7.8, 393.0], [7.9, 396.0], [8.0, 398.0], [8.1, 401.0], [8.2, 403.0], [8.3, 404.0], [8.4, 406.0], [8.5, 408.0], [8.6, 410.0], [8.7, 411.0], [8.8, 413.0], [8.9, 414.0], [9.0, 415.0], [9.1, 416.0], [9.2, 418.0], [9.3, 419.0], [9.4, 421.0], [9.5, 422.0], [9.6, 423.0], [9.7, 424.0], [9.8, 425.0], [9.9, 427.0], [10.0, 428.0], [10.1, 429.0], [10.2, 431.0], [10.3, 432.0], [10.4, 433.0], [10.5, 434.0], [10.6, 435.0], [10.7, 435.0], [10.8, 436.0], [10.9, 437.0], [11.0, 438.0], [11.1, 439.0], [11.2, 439.0], [11.3, 440.0], [11.4, 441.0], [11.5, 442.0], [11.6, 442.0], [11.7, 443.0], [11.8, 444.0], [11.9, 444.0], [12.0, 445.0], [12.1, 446.0], [12.2, 446.0], [12.3, 447.0], [12.4, 448.0], [12.5, 449.0], [12.6, 449.0], [12.7, 450.0], [12.8, 451.0], [12.9, 452.0], [13.0, 452.0], [13.1, 453.0], [13.2, 453.0], [13.3, 454.0], [13.4, 455.0], [13.5, 456.0], [13.6, 456.0], [13.7, 457.0], [13.8, 458.0], [13.9, 458.0], [14.0, 459.0], [14.1, 460.0], [14.2, 460.0], [14.3, 461.0], [14.4, 461.0], [14.5, 462.0], [14.6, 462.0], [14.7, 463.0], [14.8, 463.0], [14.9, 464.0], [15.0, 464.0], [15.1, 465.0], [15.2, 465.0], [15.3, 465.0], [15.4, 466.0], [15.5, 466.0], [15.6, 467.0], [15.7, 467.0], [15.8, 468.0], [15.9, 468.0], [16.0, 469.0], [16.1, 469.0], [16.2, 470.0], [16.3, 470.0], [16.4, 471.0], [16.5, 471.0], [16.6, 471.0], [16.7, 472.0], [16.8, 472.0], [16.9, 473.0], [17.0, 473.0], [17.1, 474.0], [17.2, 474.0], [17.3, 474.0], [17.4, 475.0], [17.5, 475.0], [17.6, 476.0], [17.7, 476.0], [17.8, 476.0], [17.9, 477.0], [18.0, 477.0], [18.1, 477.0], [18.2, 478.0], [18.3, 478.0], [18.4, 479.0], [18.5, 479.0], [18.6, 480.0], [18.7, 480.0], [18.8, 480.0], [18.9, 481.0], [19.0, 481.0], [19.1, 481.0], [19.2, 482.0], [19.3, 482.0], [19.4, 482.0], [19.5, 483.0], [19.6, 483.0], [19.7, 484.0], [19.8, 484.0], [19.9, 484.0], [20.0, 485.0], [20.1, 485.0], [20.2, 486.0], [20.3, 486.0], [20.4, 486.0], [20.5, 487.0], [20.6, 487.0], [20.7, 487.0], [20.8, 488.0], [20.9, 488.0], [21.0, 489.0], [21.1, 489.0], [21.2, 490.0], [21.3, 490.0], [21.4, 490.0], [21.5, 491.0], [21.6, 491.0], [21.7, 491.0], [21.8, 491.0], [21.9, 492.0], [22.0, 492.0], [22.1, 493.0], [22.2, 493.0], [22.3, 493.0], [22.4, 494.0], [22.5, 494.0], [22.6, 495.0], [22.7, 495.0], [22.8, 495.0], [22.9, 495.0], [23.0, 496.0], [23.1, 496.0], [23.2, 497.0], [23.3, 497.0], [23.4, 497.0], [23.5, 498.0], [23.6, 498.0], [23.7, 498.0], [23.8, 499.0], [23.9, 499.0], [24.0, 500.0], [24.1, 500.0], [24.2, 500.0], [24.3, 501.0], [24.4, 501.0], [24.5, 501.0], [24.6, 501.0], [24.7, 502.0], [24.8, 502.0], [24.9, 502.0], [25.0, 503.0], [25.1, 503.0], [25.2, 503.0], [25.3, 504.0], [25.4, 504.0], [25.5, 504.0], [25.6, 505.0], [25.7, 505.0], [25.8, 505.0], [25.9, 505.0], [26.0, 506.0], [26.1, 506.0], [26.2, 507.0], [26.3, 507.0], [26.4, 507.0], [26.5, 508.0], [26.6, 508.0], [26.7, 508.0], [26.8, 509.0], [26.9, 509.0], [27.0, 509.0], [27.1, 510.0], [27.2, 510.0], [27.3, 510.0], [27.4, 511.0], [27.5, 511.0], [27.6, 511.0], [27.7, 512.0], [27.8, 512.0], [27.9, 512.0], [28.0, 513.0], [28.1, 513.0], [28.2, 513.0], [28.3, 514.0], [28.4, 514.0], [28.5, 514.0], [28.6, 515.0], [28.7, 515.0], [28.8, 515.0], [28.9, 516.0], [29.0, 516.0], [29.1, 516.0], [29.2, 517.0], [29.3, 517.0], [29.4, 517.0], [29.5, 518.0], [29.6, 518.0], [29.7, 518.0], [29.8, 519.0], [29.9, 519.0], [30.0, 519.0], [30.1, 519.0], [30.2, 520.0], [30.3, 520.0], [30.4, 520.0], [30.5, 521.0], [30.6, 521.0], [30.7, 521.0], [30.8, 522.0], [30.9, 522.0], [31.0, 522.0], [31.1, 523.0], [31.2, 523.0], [31.3, 524.0], [31.4, 524.0], [31.5, 524.0], [31.6, 525.0], [31.7, 525.0], [31.8, 525.0], [31.9, 525.0], [32.0, 526.0], [32.1, 526.0], [32.2, 526.0], [32.3, 527.0], [32.4, 527.0], [32.5, 527.0], [32.6, 528.0], [32.7, 528.0], [32.8, 529.0], [32.9, 529.0], [33.0, 529.0], [33.1, 530.0], [33.2, 530.0], [33.3, 530.0], [33.4, 531.0], [33.5, 531.0], [33.6, 531.0], [33.7, 532.0], [33.8, 532.0], [33.9, 532.0], [34.0, 533.0], [34.1, 533.0], [34.2, 533.0], [34.3, 534.0], [34.4, 534.0], [34.5, 534.0], [34.6, 535.0], [34.7, 535.0], [34.8, 535.0], [34.9, 535.0], [35.0, 536.0], [35.1, 536.0], [35.2, 537.0], [35.3, 537.0], [35.4, 537.0], [35.5, 538.0], [35.6, 538.0], [35.7, 538.0], [35.8, 538.0], [35.9, 539.0], [36.0, 539.0], [36.1, 540.0], [36.2, 540.0], [36.3, 540.0], [36.4, 541.0], [36.5, 541.0], [36.6, 541.0], [36.7, 541.0], [36.8, 542.0], [36.9, 542.0], [37.0, 542.0], [37.1, 543.0], [37.2, 543.0], [37.3, 543.0], [37.4, 544.0], [37.5, 544.0], [37.6, 544.0], [37.7, 545.0], [37.8, 545.0], [37.9, 545.0], [38.0, 546.0], [38.1, 546.0], [38.2, 546.0], [38.3, 546.0], [38.4, 547.0], [38.5, 547.0], [38.6, 547.0], [38.7, 548.0], [38.8, 548.0], [38.9, 549.0], [39.0, 549.0], [39.1, 549.0], [39.2, 550.0], [39.3, 550.0], [39.4, 550.0], [39.5, 550.0], [39.6, 551.0], [39.7, 551.0], [39.8, 551.0], [39.9, 552.0], [40.0, 552.0], [40.1, 552.0], [40.2, 553.0], [40.3, 553.0], [40.4, 554.0], [40.5, 554.0], [40.6, 554.0], [40.7, 555.0], [40.8, 555.0], [40.9, 555.0], [41.0, 555.0], [41.1, 556.0], [41.2, 556.0], [41.3, 557.0], [41.4, 557.0], [41.5, 557.0], [41.6, 557.0], [41.7, 558.0], [41.8, 558.0], [41.9, 558.0], [42.0, 558.0], [42.1, 559.0], [42.2, 559.0], [42.3, 560.0], [42.4, 560.0], [42.5, 560.0], [42.6, 560.0], [42.7, 561.0], [42.8, 561.0], [42.9, 561.0], [43.0, 562.0], [43.1, 562.0], [43.2, 562.0], [43.3, 563.0], [43.4, 563.0], [43.5, 563.0], [43.6, 564.0], [43.7, 564.0], [43.8, 564.0], [43.9, 564.0], [44.0, 565.0], [44.1, 565.0], [44.2, 565.0], [44.3, 566.0], [44.4, 566.0], [44.5, 566.0], [44.6, 567.0], [44.7, 567.0], [44.8, 567.0], [44.9, 568.0], [45.0, 568.0], [45.1, 568.0], [45.2, 569.0], [45.3, 569.0], [45.4, 569.0], [45.5, 570.0], [45.6, 570.0], [45.7, 570.0], [45.8, 570.0], [45.9, 571.0], [46.0, 571.0], [46.1, 571.0], [46.2, 572.0], [46.3, 572.0], [46.4, 572.0], [46.5, 573.0], [46.6, 573.0], [46.7, 573.0], [46.8, 573.0], [46.9, 574.0], [47.0, 574.0], [47.1, 574.0], [47.2, 574.0], [47.3, 575.0], [47.4, 575.0], [47.5, 575.0], [47.6, 575.0], [47.7, 576.0], [47.8, 576.0], [47.9, 576.0], [48.0, 576.0], [48.1, 577.0], [48.2, 577.0], [48.3, 577.0], [48.4, 578.0], [48.5, 578.0], [48.6, 578.0], [48.7, 578.0], [48.8, 579.0], [48.9, 579.0], [49.0, 579.0], [49.1, 580.0], [49.2, 580.0], [49.3, 580.0], [49.4, 580.0], [49.5, 581.0], [49.6, 581.0], [49.7, 581.0], [49.8, 582.0], [49.9, 582.0], [50.0, 582.0], [50.1, 583.0], [50.2, 583.0], [50.3, 583.0], [50.4, 584.0], [50.5, 584.0], [50.6, 585.0], [50.7, 585.0], [50.8, 585.0], [50.9, 586.0], [51.0, 586.0], [51.1, 586.0], [51.2, 587.0], [51.3, 587.0], [51.4, 587.0], [51.5, 588.0], [51.6, 588.0], [51.7, 588.0], [51.8, 589.0], [51.9, 589.0], [52.0, 589.0], [52.1, 590.0], [52.2, 590.0], [52.3, 591.0], [52.4, 591.0], [52.5, 591.0], [52.6, 592.0], [52.7, 592.0], [52.8, 592.0], [52.9, 592.0], [53.0, 593.0], [53.1, 593.0], [53.2, 593.0], [53.3, 594.0], [53.4, 594.0], [53.5, 595.0], [53.6, 595.0], [53.7, 595.0], [53.8, 596.0], [53.9, 596.0], [54.0, 596.0], [54.1, 597.0], [54.2, 597.0], [54.3, 597.0], [54.4, 598.0], [54.5, 598.0], [54.6, 599.0], [54.7, 599.0], [54.8, 599.0], [54.9, 600.0], [55.0, 600.0], [55.1, 600.0], [55.2, 601.0], [55.3, 601.0], [55.4, 601.0], [55.5, 602.0], [55.6, 602.0], [55.7, 602.0], [55.8, 603.0], [55.9, 603.0], [56.0, 604.0], [56.1, 604.0], [56.2, 604.0], [56.3, 605.0], [56.4, 605.0], [56.5, 605.0], [56.6, 606.0], [56.7, 606.0], [56.8, 606.0], [56.9, 607.0], [57.0, 607.0], [57.1, 608.0], [57.2, 608.0], [57.3, 608.0], [57.4, 609.0], [57.5, 609.0], [57.6, 609.0], [57.7, 610.0], [57.8, 610.0], [57.9, 611.0], [58.0, 611.0], [58.1, 611.0], [58.2, 612.0], [58.3, 612.0], [58.4, 613.0], [58.5, 613.0], [58.6, 613.0], [58.7, 614.0], [58.8, 614.0], [58.9, 615.0], [59.0, 615.0], [59.1, 615.0], [59.2, 616.0], [59.3, 616.0], [59.4, 616.0], [59.5, 617.0], [59.6, 617.0], [59.7, 618.0], [59.8, 618.0], [59.9, 618.0], [60.0, 619.0], [60.1, 619.0], [60.2, 619.0], [60.3, 620.0], [60.4, 620.0], [60.5, 621.0], [60.6, 621.0], [60.7, 621.0], [60.8, 622.0], [60.9, 622.0], [61.0, 623.0], [61.1, 623.0], [61.2, 623.0], [61.3, 624.0], [61.4, 624.0], [61.5, 624.0], [61.6, 625.0], [61.7, 625.0], [61.8, 626.0], [61.9, 626.0], [62.0, 626.0], [62.1, 627.0], [62.2, 627.0], [62.3, 627.0], [62.4, 628.0], [62.5, 628.0], [62.6, 629.0], [62.7, 629.0], [62.8, 629.0], [62.9, 630.0], [63.0, 630.0], [63.1, 630.0], [63.2, 631.0], [63.3, 631.0], [63.4, 632.0], [63.5, 632.0], [63.6, 633.0], [63.7, 633.0], [63.8, 633.0], [63.9, 634.0], [64.0, 634.0], [64.1, 635.0], [64.2, 635.0], [64.3, 635.0], [64.4, 636.0], [64.5, 636.0], [64.6, 637.0], [64.7, 637.0], [64.8, 637.0], [64.9, 638.0], [65.0, 638.0], [65.1, 639.0], [65.2, 639.0], [65.3, 640.0], [65.4, 640.0], [65.5, 640.0], [65.6, 641.0], [65.7, 641.0], [65.8, 642.0], [65.9, 642.0], [66.0, 643.0], [66.1, 643.0], [66.2, 643.0], [66.3, 644.0], [66.4, 645.0], [66.5, 645.0], [66.6, 645.0], [66.7, 646.0], [66.8, 646.0], [66.9, 647.0], [67.0, 648.0], [67.1, 648.0], [67.2, 649.0], [67.3, 649.0], [67.4, 649.0], [67.5, 650.0], [67.6, 650.0], [67.7, 651.0], [67.8, 651.0], [67.9, 652.0], [68.0, 652.0], [68.1, 653.0], [68.2, 653.0], [68.3, 654.0], [68.4, 654.0], [68.5, 654.0], [68.6, 655.0], [68.7, 655.0], [68.8, 656.0], [68.9, 656.0], [69.0, 657.0], [69.1, 657.0], [69.2, 658.0], [69.3, 658.0], [69.4, 659.0], [69.5, 659.0], [69.6, 659.0], [69.7, 660.0], [69.8, 660.0], [69.9, 660.0], [70.0, 661.0], [70.1, 662.0], [70.2, 662.0], [70.3, 662.0], [70.4, 663.0], [70.5, 664.0], [70.6, 664.0], [70.7, 665.0], [70.8, 665.0], [70.9, 666.0], [71.0, 666.0], [71.1, 666.0], [71.2, 667.0], [71.3, 667.0], [71.4, 668.0], [71.5, 668.0], [71.6, 669.0], [71.7, 670.0], [71.8, 670.0], [71.9, 671.0], [72.0, 671.0], [72.1, 672.0], [72.2, 672.0], [72.3, 673.0], [72.4, 673.0], [72.5, 674.0], [72.6, 675.0], [72.7, 675.0], [72.8, 676.0], [72.9, 676.0], [73.0, 677.0], [73.1, 677.0], [73.2, 678.0], [73.3, 679.0], [73.4, 679.0], [73.5, 680.0], [73.6, 681.0], [73.7, 681.0], [73.8, 682.0], [73.9, 683.0], [74.0, 683.0], [74.1, 684.0], [74.2, 685.0], [74.3, 685.0], [74.4, 686.0], [74.5, 687.0], [74.6, 687.0], [74.7, 688.0], [74.8, 688.0], [74.9, 689.0], [75.0, 690.0], [75.1, 690.0], [75.2, 691.0], [75.3, 692.0], [75.4, 692.0], [75.5, 693.0], [75.6, 694.0], [75.7, 694.0], [75.8, 695.0], [75.9, 695.0], [76.0, 696.0], [76.1, 697.0], [76.2, 697.0], [76.3, 698.0], [76.4, 699.0], [76.5, 699.0], [76.6, 700.0], [76.7, 700.0], [76.8, 701.0], [76.9, 701.0], [77.0, 702.0], [77.1, 702.0], [77.2, 703.0], [77.3, 704.0], [77.4, 704.0], [77.5, 705.0], [77.6, 706.0], [77.7, 706.0], [77.8, 707.0], [77.9, 708.0], [78.0, 708.0], [78.1, 709.0], [78.2, 710.0], [78.3, 711.0], [78.4, 711.0], [78.5, 712.0], [78.6, 713.0], [78.7, 714.0], [78.8, 714.0], [78.9, 715.0], [79.0, 716.0], [79.1, 716.0], [79.2, 717.0], [79.3, 718.0], [79.4, 719.0], [79.5, 720.0], [79.6, 720.0], [79.7, 721.0], [79.8, 722.0], [79.9, 722.0], [80.0, 723.0], [80.1, 724.0], [80.2, 725.0], [80.3, 726.0], [80.4, 727.0], [80.5, 727.0], [80.6, 728.0], [80.7, 729.0], [80.8, 730.0], [80.9, 731.0], [81.0, 731.0], [81.1, 732.0], [81.2, 733.0], [81.3, 734.0], [81.4, 735.0], [81.5, 736.0], [81.6, 737.0], [81.7, 738.0], [81.8, 738.0], [81.9, 739.0], [82.0, 740.0], [82.1, 741.0], [82.2, 742.0], [82.3, 743.0], [82.4, 744.0], [82.5, 746.0], [82.6, 746.0], [82.7, 747.0], [82.8, 749.0], [82.9, 750.0], [83.0, 751.0], [83.1, 752.0], [83.2, 753.0], [83.3, 754.0], [83.4, 755.0], [83.5, 757.0], [83.6, 758.0], [83.7, 759.0], [83.8, 760.0], [83.9, 761.0], [84.0, 763.0], [84.1, 764.0], [84.2, 765.0], [84.3, 766.0], [84.4, 768.0], [84.5, 769.0], [84.6, 771.0], [84.7, 772.0], [84.8, 774.0], [84.9, 775.0], [85.0, 777.0], [85.1, 778.0], [85.2, 779.0], [85.3, 781.0], [85.4, 782.0], [85.5, 784.0], [85.6, 785.0], [85.7, 787.0], [85.8, 788.0], [85.9, 790.0], [86.0, 791.0], [86.1, 792.0], [86.2, 793.0], [86.3, 795.0], [86.4, 797.0], [86.5, 798.0], [86.6, 799.0], [86.7, 801.0], [86.8, 803.0], [86.9, 805.0], [87.0, 807.0], [87.1, 809.0], [87.2, 811.0], [87.3, 813.0], [87.4, 815.0], [87.5, 817.0], [87.6, 820.0], [87.7, 822.0], [87.8, 824.0], [87.9, 826.0], [88.0, 828.0], [88.1, 832.0], [88.2, 834.0], [88.3, 837.0], [88.4, 840.0], [88.5, 844.0], [88.6, 847.0], [88.7, 851.0], [88.8, 853.0], [88.9, 857.0], [89.0, 861.0], [89.1, 864.0], [89.2, 868.0], [89.3, 871.0], [89.4, 875.0], [89.5, 880.0], [89.6, 882.0], [89.7, 887.0], [89.8, 892.0], [89.9, 896.0], [90.0, 900.0], [90.1, 906.0], [90.2, 910.0], [90.3, 915.0], [90.4, 918.0], [90.5, 923.0], [90.6, 927.0], [90.7, 931.0], [90.8, 935.0], [90.9, 939.0], [91.0, 943.0], [91.1, 946.0], [91.2, 950.0], [91.3, 953.0], [91.4, 958.0], [91.5, 961.0], [91.6, 965.0], [91.7, 969.0], [91.8, 973.0], [91.9, 978.0], [92.0, 984.0], [92.1, 989.0], [92.2, 996.0], [92.3, 1002.0], [92.4, 1007.0], [92.5, 1012.0], [92.6, 1018.0], [92.7, 1024.0], [92.8, 1032.0], [92.9, 1040.0], [93.0, 1048.0], [93.1, 1057.0], [93.2, 1069.0], [93.3, 1079.0], [93.4, 1091.0], [93.5, 1104.0], [93.6, 1111.0], [93.7, 1119.0], [93.8, 1128.0], [93.9, 1137.0], [94.0, 1148.0], [94.1, 1159.0], [94.2, 1171.0], [94.3, 1184.0], [94.4, 1197.0], [94.5, 1206.0], [94.6, 1217.0], [94.7, 1225.0], [94.8, 1231.0], [94.9, 1237.0], [95.0, 1241.0], [95.1, 1246.0], [95.2, 1256.0], [95.3, 1269.0], [95.4, 1280.0], [95.5, 1293.0], [95.6, 1309.0], [95.7, 1320.0], [95.8, 1333.0], [95.9, 1349.0], [96.0, 1363.0], [96.1, 1376.0], [96.2, 1392.0], [96.3, 1407.0], [96.4, 1435.0], [96.5, 1473.0], [96.6, 1508.0], [96.7, 1554.0], [96.8, 1582.0], [96.9, 1616.0], [97.0, 1653.0], [97.1, 1683.0], [97.2, 1714.0], [97.3, 1747.0], [97.4, 1775.0], [97.5, 1815.0], [97.6, 1838.0], [97.7, 1867.0], [97.8, 1906.0], [97.9, 1926.0], [98.0, 1958.0], [98.1, 1995.0], [98.2, 2026.0], [98.3, 2054.0], [98.4, 2076.0], [98.5, 2112.0], [98.6, 2145.0], [98.7, 2179.0], [98.8, 2205.0], [98.9, 2237.0], [99.0, 2263.0], [99.1, 2297.0], [99.2, 2332.0], [99.3, 2381.0], [99.4, 2440.0], [99.5, 2490.0], [99.6, 2524.0], [99.7, 2568.0], [99.8, 2623.0], [99.9, 2731.0], [100.0, 3049.0]], "isOverall": false, "label": "/user/search-4", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 4.0, "minX": 0.0, "maxY": 14595.0, "series": [{"data": [[0.0, 1586.0], [600.0, 10280.0], [700.0, 4730.0], [800.0, 1604.0], [900.0, 1069.0], [1000.0, 574.0], [1100.0, 456.0], [1200.0, 527.0], [1300.0, 334.0], [1400.0, 146.0], [1500.0, 130.0], [100.0, 1354.0], [1600.0, 150.0], [1700.0, 139.0], [1800.0, 154.0], [1900.0, 161.0], [2000.0, 166.0], [2100.0, 145.0], [2200.0, 156.0], [2300.0, 105.0], [2400.0, 95.0], [2500.0, 108.0], [2600.0, 55.0], [2700.0, 25.0], [2800.0, 18.0], [2900.0, 11.0], [3000.0, 4.0], [200.0, 422.0], [300.0, 443.0], [400.0, 7524.0], [500.0, 14595.0]], "isOverall": false, "label": "/user/search-4", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 86.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1 500ms"], [2, "Requests having \nresponse time > 1 500ms"], [3, "Requests in error"]], "maxY": 44912.0, "series": [{"data": [[0.0, 575.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1693.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1 500ms", "isController": false}, {"data": [[2.0, 86.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1 500ms", "isController": false}, {"data": [[3.0, 44912.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 86.39181286549709, "minX": 1.744014327E12, "maxY": 1000.0, "series": [{"data": [[1.744014328E12, 618.3948497854083], [1.744014327E12, 90.49056603773585], [1.74401433E12, 1000.0], [1.744014329E12, 1000.0], [1.744014333E12, 1000.0], [1.744014332E12, 1000.0], [1.744014331E12, 1000.0], [1.744014336E12, 1000.0], [1.744014335E12, 1000.0], [1.744014334E12, 1000.0], [1.744014359E12, 86.39181286549709], [1.744014358E12, 648.557539682539], [1.744014349E12, 1000.0], [1.744014348E12, 1000.0], [1.744014347E12, 1000.0], [1.744014352E12, 1000.0], [1.744014351E12, 1000.0], [1.74401435E12, 1000.0], [1.744014354E12, 1000.0], [1.744014353E12, 1000.0], [1.744014357E12, 998.237029501526], [1.744014356E12, 1000.0], [1.744014355E12, 1000.0], [1.744014338E12, 1000.0], [1.744014337E12, 1000.0], [1.744014341E12, 1000.0], [1.74401434E12, 1000.0], [1.744014339E12, 1000.0], [1.744014344E12, 1000.0], [1.744014343E12, 1000.0], [1.744014342E12, 1000.0], [1.744014346E12, 1000.0], [1.744014345E12, 1000.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.744014359E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 86.22222222222223, "minX": 1.0, "maxY": 1365.0, "series": [{"data": [[4.0, 996.0], [5.0, 945.0], [6.0, 949.0], [7.0, 1007.0], [8.0, 1111.0], [9.0, 953.0], [10.0, 934.0], [11.0, 952.0], [12.0, 873.0], [13.0, 1147.0], [15.0, 967.5], [16.0, 1049.0], [19.0, 918.6666666666666], [20.0, 1062.0], [22.0, 959.5], [23.0, 1117.0], [24.0, 820.0], [25.0, 1084.0], [27.0, 809.0], [28.0, 954.0], [30.0, 1113.0], [31.0, 962.0], [33.0, 812.0], [32.0, 880.0], [37.0, 984.0], [36.0, 991.0], [38.0, 996.0], [41.0, 1072.3333333333333], [42.0, 924.0], [47.0, 847.0], [46.0, 933.75], [49.0, 983.5], [50.0, 1087.0], [53.0, 1058.3333333333333], [55.0, 877.5], [57.0, 926.0], [56.0, 1029.0], [58.0, 835.0], [61.0, 866.0], [60.0, 963.5], [66.0, 923.5], [64.0, 910.0], [71.0, 970.0], [70.0, 844.0], [69.0, 1016.0], [68.0, 1024.0], [74.0, 86.22222222222223], [73.0, 969.0], [72.0, 985.0], [79.0, 1019.0], [78.0, 949.0], [77.0, 1018.0], [76.0, 985.0], [82.0, 397.0], [81.0, 903.5], [87.0, 985.5], [85.0, 989.3333333333334], [88.0, 245.0], [90.0, 345.0], [91.0, 97.3076923076923], [89.0, 1082.0], [92.0, 110.25], [95.0, 1004.0], [94.0, 1007.0], [93.0, 1012.6666666666666], [97.0, 696.0], [99.0, 854.0], [98.0, 943.0], [103.0, 826.0], [102.0, 969.0], [101.0, 822.0], [100.0, 857.0], [107.0, 1055.0], [106.0, 801.0], [105.0, 856.0], [104.0, 875.0], [109.0, 567.6666666666666], [111.0, 1103.0], [110.0, 979.0], [114.0, 318.66666666666663], [113.0, 842.0], [112.0, 892.0], [118.0, 952.0], [116.0, 889.0], [123.0, 1043.0], [122.0, 705.0], [121.0, 1017.0], [120.0, 900.0], [127.0, 961.5], [125.0, 1085.0], [124.0, 1069.0], [135.0, 990.0], [134.0, 991.0], [133.0, 823.0], [132.0, 946.0], [131.0, 870.3333333333334], [128.0, 1044.0], [139.0, 335.7142857142857], [140.0, 319.25], [141.0, 188.66666666666669], [143.0, 938.0], [142.0, 860.0], [137.0, 992.0], [136.0, 762.0], [145.0, 277.9], [146.0, 588.5], [151.0, 889.0], [149.0, 1005.0], [148.0, 787.0], [147.0, 936.0], [152.0, 562.0], [153.0, 323.3333333333333], [155.0, 591.0], [158.0, 918.5], [156.0, 796.5], [167.0, 945.5], [165.0, 1046.0], [164.0, 916.0], [163.0, 1071.0], [162.0, 1054.0], [161.0, 872.6666666666666], [168.0, 549.5], [175.0, 428.6666666666667], [174.0, 952.0], [173.0, 984.0], [172.0, 1048.0], [171.0, 1009.5], [169.0, 761.0], [176.0, 135.0], [183.0, 964.5], [181.0, 1031.0], [180.0, 947.0], [179.0, 960.5], [188.0, 131.0], [191.0, 1032.0], [190.0, 959.0], [189.0, 998.5], [187.0, 1124.0], [186.0, 1041.0], [185.0, 1034.0], [192.0, 531.0], [199.0, 882.0], [198.0, 931.0], [197.0, 1012.0], [196.0, 1148.0], [195.0, 974.0], [194.0, 927.0], [193.0, 1005.0], [200.0, 521.5], [206.0, 523.5], [207.0, 995.0], [205.0, 1012.0], [204.0, 1046.0], [203.0, 978.0], [202.0, 1173.0], [201.0, 1299.0], [215.0, 1050.0], [214.0, 949.0], [213.0, 1146.0], [212.0, 940.0], [211.0, 868.0], [210.0, 940.0], [209.0, 1139.0], [208.0, 952.0], [217.0, 592.0], [218.0, 543.5], [220.0, 361.5], [222.0, 612.5], [221.0, 1175.0], [219.0, 822.0], [216.0, 1162.0], [225.0, 534.5], [230.0, 569.0], [231.0, 990.0], [229.0, 948.0], [228.0, 926.5], [226.0, 966.0], [224.0, 1087.0], [233.0, 681.0], [234.0, 552.5], [239.0, 976.0], [238.0, 1067.0], [237.0, 959.0], [236.0, 925.0], [235.0, 928.0], [240.0, 546.0], [242.0, 401.25], [245.0, 451.6666666666667], [246.0, 1071.0], [244.0, 948.0], [243.0, 985.0], [250.0, 129.0], [252.0, 594.8333333333334], [255.0, 622.0], [253.0, 1098.0], [249.0, 971.0], [248.0, 924.5], [263.0, 594.0], [259.0, 91.0], [258.0, 1115.0], [257.0, 1135.0], [256.0, 959.0], [268.0, 1113.0], [260.0, 662.0], [261.0, 595.0], [262.0, 576.5], [265.0, 547.5], [266.0, 454.6666666666667], [267.0, 1338.0], [269.0, 134.0], [270.0, 949.0], [264.0, 971.0], [284.0, 901.0], [286.0, 1284.0], [277.0, 586.5], [276.0, 1219.0], [281.0, 591.5], [285.0, 1064.0], [282.0, 976.0], [280.0, 973.0], [279.0, 974.0], [273.0, 1067.0], [272.0, 1254.0], [275.0, 1308.0], [274.0, 976.0], [278.0, 975.0], [291.0, 1238.0], [302.0, 963.0], [294.0, 582.5], [299.0, 582.5], [301.0, 963.0], [298.0, 1009.5], [296.0, 965.0], [295.0, 962.0], [293.0, 967.5], [290.0, 1074.0], [289.0, 1280.0], [288.0, 971.5], [307.0, 158.0], [305.0, 760.0], [304.0, 701.6666666666666], [306.0, 598.0], [310.0, 364.75], [309.0, 1144.6666666666667], [311.0, 506.5], [315.0, 533.5714285714286], [313.0, 956.0], [316.0, 562.5], [318.0, 1159.0], [317.0, 843.0], [319.0, 872.0], [333.0, 1067.0], [323.0, 718.0], [327.0, 291.8571428571429], [322.0, 955.0], [320.0, 1154.0], [335.0, 923.0], [332.0, 956.0], [331.0, 1034.0], [330.0, 1011.5], [328.0, 954.0], [326.0, 851.0], [325.0, 1219.0], [324.0, 954.0], [351.0, 1001.0], [343.0, 218.0], [340.0, 437.33333333333337], [342.0, 876.0], [341.0, 948.0], [344.0, 208.5], [345.0, 1064.6666666666667], [350.0, 988.0], [349.0, 945.0], [348.0, 948.0], [339.0, 953.0], [338.0, 953.0], [337.0, 853.0], [336.0, 1031.0], [347.0, 1008.0], [346.0, 1214.0], [366.0, 935.0], [353.0, 461.33333333333337], [357.0, 550.0], [356.0, 1032.0], [367.0, 735.0], [365.0, 891.6666666666666], [355.0, 942.0], [354.0, 945.0], [362.0, 936.0], [361.0, 937.0], [360.0, 940.5], [358.0, 943.0], [352.0, 944.0], [382.0, 1220.0], [368.0, 601.0], [369.0, 1075.0], [375.0, 983.0], [374.0, 923.0], [373.0, 974.0], [372.0, 926.5], [370.0, 408.75], [371.0, 235.0], [378.0, 552.5], [379.0, 386.0], [383.0, 775.0], [377.0, 920.0], [376.0, 827.0], [381.0, 826.0], [380.0, 981.0], [386.0, 561.0], [389.0, 214.0], [388.0, 915.0], [391.0, 915.0], [385.0, 922.0], [384.0, 819.0], [390.0, 945.0], [393.0, 527.5], [396.0, 606.5], [399.0, 408.0], [398.0, 907.0], [397.0, 912.0], [395.0, 910.0], [392.0, 911.0], [412.0, 165.66666666666666], [401.0, 585.0], [402.0, 485.5], [403.0, 931.0], [404.0, 335.75], [405.0, 408.3333333333333], [407.0, 913.5], [400.0, 906.0], [409.0, 672.0], [411.0, 1155.0], [410.0, 1152.0], [415.0, 264.0], [414.0, 1064.0], [413.0, 917.0], [430.0, 1079.0], [417.0, 270.875], [421.0, 419.33333333333337], [420.0, 1113.0], [423.0, 801.0], [416.0, 992.0], [422.0, 817.0], [431.0, 1049.0], [429.0, 952.0], [428.0, 949.0], [419.0, 805.0], [418.0, 811.0], [427.0, 1150.0], [426.0, 1033.0], [425.0, 792.0], [424.0, 911.0], [446.0, 829.0], [436.0, 176.0], [437.0, 212.33333333333334], [443.0, 473.66666666666663], [444.0, 224.0], [439.0, 1049.0], [435.0, 948.0], [434.0, 979.3333333333334], [438.0, 1081.6666666666667], [447.0, 207.0], [445.0, 940.0], [442.0, 1021.0], [440.0, 1029.0], [460.0, 160.25], [448.0, 741.3333333333334], [449.0, 518.6666666666666], [451.0, 1047.0], [450.0, 1034.0], [453.0, 531.0], [452.0, 920.0], [455.0, 907.0], [454.0, 807.0], [457.0, 620.0], [456.0, 804.0], [463.0, 738.6666666666666], [462.0, 922.0], [461.0, 1121.0], [459.0, 1073.0], [458.0, 805.0], [477.0, 693.0], [464.0, 333.66666666666663], [467.0, 445.5], [466.0, 1140.0], [465.0, 1071.0], [470.0, 531.5], [469.0, 1038.0], [468.0, 1111.0], [471.0, 1159.0], [473.0, 340.0], [474.0, 582.0], [478.0, 1062.0], [476.0, 861.0], [472.0, 915.0], [492.0, 249.0], [481.0, 210.0], [480.0, 921.0], [482.0, 464.1666666666667], [483.0, 228.0], [484.0, 639.0], [485.0, 919.0], [491.0, 226.0], [490.0, 1045.0], [489.0, 882.75], [495.0, 862.0], [494.0, 905.0], [493.0, 989.6666666666666], [508.0, 536.0], [498.0, 377.1666666666667], [503.0, 791.0], [496.0, 862.0], [497.0, 863.0], [501.0, 579.5], [500.0, 968.5], [502.0, 433.0], [504.0, 458.33333333333337], [506.0, 249.0], [505.0, 956.0], [507.0, 797.0], [510.0, 591.0], [511.0, 875.0], [509.0, 1080.0], [536.0, 292.0], [528.0, 300.5], [516.0, 478.6666666666667], [513.0, 652.5], [512.0, 1105.0], [514.0, 989.0], [527.0, 1035.0], [526.0, 872.0], [525.0, 922.0], [517.0, 443.25], [519.0, 946.0], [518.0, 846.0], [537.0, 538.0], [538.0, 863.0], [540.0, 787.0], [539.0, 992.0], [541.0, 500.33333333333337], [542.0, 488.66666666666663], [543.0, 662.5], [521.0, 635.0], [520.0, 868.0], [523.0, 1043.0], [522.0, 1024.0], [524.0, 332.0], [529.0, 730.3333333333334], [530.0, 536.0], [532.0, 669.0], [531.0, 954.0], [533.0, 312.0], [535.0, 864.0], [534.0, 864.0], [550.0, 548.3333333333334], [546.0, 310.6666666666667], [545.0, 790.0], [544.0, 1093.0], [547.0, 939.5], [549.0, 1030.0], [548.0, 1047.0], [551.0, 244.5], [570.0, 817.0], [568.0, 835.5], [572.0, 783.0], [571.0, 807.0], [574.0, 908.0], [573.0, 1004.0], [553.0, 732.5], [554.0, 571.0], [557.0, 506.25], [556.0, 909.5], [558.0, 583.0], [564.0, 389.0], [563.0, 938.0], [562.0, 932.0], [561.0, 874.6666666666666], [566.0, 1076.0], [565.0, 796.0], [575.0, 835.0], [577.0, 558.0], [578.0, 427.5], [579.0, 823.0], [581.0, 1030.0], [580.0, 1000.0], [601.0, 863.5], [583.0, 1011.0], [602.0, 511.0], [607.0, 710.0], [605.0, 1029.0], [603.0, 893.0], [585.0, 319.0], [584.0, 766.0], [586.0, 575.25], [587.0, 335.5], [589.0, 1009.6666666666666], [591.0, 517.0], [576.0, 830.0], [590.0, 811.0], [592.0, 695.5], [594.0, 167.5], [593.0, 1022.0], [596.0, 755.75], [599.0, 576.3333333333334], [598.0, 1020.0], [597.0, 812.0], [636.0, 662.0], [611.0, 569.0], [610.0, 470.5], [608.0, 976.0], [612.0, 384.0], [614.0, 914.0], [613.0, 896.0], [632.0, 973.0], [615.0, 784.0], [635.0, 961.0], [633.0, 833.0], [617.0, 517.3333333333334], [616.0, 785.0], [619.0, 957.0], [618.0, 922.0], [622.0, 965.0], [620.0, 1009.0], [623.0, 129.0], [630.0, 723.5], [631.0, 586.5], [639.0, 802.5], [629.0, 962.0], [628.0, 767.0], [627.0, 986.0], [626.0, 1004.0], [625.0, 977.0], [624.0, 995.5], [637.0, 899.0], [647.0, 580.3333333333334], [645.0, 649.0], [644.0, 693.5], [643.0, 741.0], [642.0, 744.0], [641.0, 854.0], [640.0, 825.0], [646.0, 585.5], [651.0, 702.0], [650.0, 964.0], [648.0, 875.0], [652.0, 983.0], [654.0, 366.6666666666667], [658.0, 601.5], [662.0, 243.0], [661.0, 1003.0], [660.0, 988.0], [663.0, 1111.5], [668.0, 688.75], [666.0, 852.0], [665.0, 995.0], [664.0, 1108.0], [670.0, 1163.0], [657.0, 971.0], [656.0, 979.75], [669.0, 987.0], [700.0, 332.5], [673.0, 464.75], [672.0, 701.3333333333334], [687.0, 970.0], [686.0, 984.0], [674.0, 675.0], [677.0, 953.0], [676.0, 1086.5], [679.0, 1365.0], [678.0, 973.0], [698.0, 1017.0], [697.0, 975.5], [681.0, 719.5], [680.0, 949.0], [684.0, 976.0], [683.0, 1089.5], [685.0, 691.0], [690.0, 690.0], [691.0, 814.0], [693.0, 646.2], [695.0, 1126.0], [694.0, 968.0], [702.0, 864.6], [703.0, 967.0], [689.0, 980.0], [688.0, 902.0], [728.0, 1111.0], [734.0, 1016.5], [704.0, 338.0], [710.0, 544.8], [709.0, 1103.0], [707.0, 936.0], [706.0, 958.0], [705.0, 966.0], [711.0, 951.0], [730.0, 1052.5], [732.0, 1180.0], [731.0, 950.0], [713.0, 753.5], [716.0, 958.0], [715.0, 1121.0], [717.0, 721.0], [719.0, 1245.0], [718.0, 939.0], [720.0, 593.0], [721.0, 705.5], [722.0, 1109.0], [723.0, 597.5], [725.0, 711.5], [724.0, 1098.0], [727.0, 949.0], [726.0, 952.0], [735.0, 948.0], [765.0, 1127.0], [738.0, 564.1666666666667], [748.0, 896.6666666666666], [737.0, 1163.0], [745.0, 946.5], [753.0, 782.5], [752.0, 1073.5], [755.0, 1045.5], [764.0, 938.3333333333334], [761.0, 1079.0], [760.0, 940.0], [743.0, 944.0], [742.0, 1106.0], [741.0, 1104.0], [739.0, 946.0], [759.0, 942.0], [758.0, 944.0], [757.0, 1206.0], [756.0, 911.0], [793.0, 892.5], [787.0, 1162.0], [798.0, 866.0], [797.0, 1080.0], [796.0, 1152.6666666666667], [783.0, 1126.0], [769.0, 939.0], [768.0, 1019.6666666666666], [772.0, 933.0], [771.0, 1000.5], [775.0, 1175.5], [773.0, 191.0], [781.0, 1073.0], [780.0, 1172.0], [779.0, 885.0], [778.0, 932.0], [777.0, 930.0], [776.0, 1174.0], [791.0, 1171.0], [790.0, 1149.0], [789.0, 1007.0], [786.0, 556.0], [784.0, 1221.0], [825.0, 917.0], [830.0, 851.0], [831.0, 1009.0], [819.0, 905.3333333333334], [816.0, 907.0], [821.0, 1185.0], [820.0, 1230.0], [829.0, 592.5], [827.0, 901.0], [826.0, 906.0], [824.0, 904.0], [807.0, 1036.0], [806.0, 876.0], [804.0, 1180.0], [803.0, 910.0], [800.0, 882.5], [815.0, 833.0], [814.0, 1021.0], [813.0, 910.0], [812.0, 1056.0], [811.0, 881.6666666666666], [808.0, 910.0], [823.0, 862.0], [822.0, 912.0], [861.0, 1110.0], [863.0, 864.0], [848.0, 935.0], [859.0, 892.0], [858.0, 1009.0], [857.0, 1009.0], [856.0, 885.2], [845.0, 992.0], [834.0, 958.0], [832.0, 1032.0], [836.0, 900.0], [835.0, 898.0], [838.0, 905.0], [837.0, 897.0], [843.0, 1011.5], [841.0, 896.0], [840.0, 926.3333333333334], [854.0, 1163.5], [852.0, 897.0], [851.0, 950.5], [849.0, 895.0], [889.0, 1012.5], [894.0, 964.0], [895.0, 1083.5], [880.0, 891.0], [882.0, 940.5], [881.0, 906.0], [893.0, 1083.6666666666667], [892.0, 842.75], [890.0, 903.0], [879.0, 965.1666666666667], [864.0, 898.0], [867.0, 905.6666666666666], [865.0, 1057.0], [869.0, 891.6666666666666], [868.0, 795.0], [871.0, 791.0], [870.0, 971.0], [878.0, 949.5], [877.0, 974.0], [876.0, 848.0], [875.0, 904.6666666666666], [873.0, 573.5], [887.0, 910.0], [886.0, 857.1666666666667], [884.0, 888.0], [883.0, 898.0], [924.0, 895.0], [925.0, 821.5], [927.0, 883.0], [913.0, 943.0], [912.0, 1091.0], [915.0, 789.6666666666666], [914.0, 921.3333333333334], [917.0, 893.8333333333333], [916.0, 869.5], [926.0, 1056.0], [923.0, 853.0], [922.0, 1173.0], [921.0, 840.5], [920.0, 929.0], [910.0, 857.5], [896.0, 1026.0], [898.0, 932.0], [897.0, 931.3333333333334], [900.0, 1029.0], [899.0, 1108.0], [902.0, 760.0], [901.0, 1092.0], [908.0, 754.0], [907.0, 940.5], [906.0, 883.0], [905.0, 957.5], [904.0, 842.5], [919.0, 953.0], [918.0, 872.0], [952.0, 645.6666666666666], [929.0, 825.2], [928.0, 910.5], [931.0, 925.0], [930.0, 876.0], [943.0, 831.0], [942.0, 875.3333333333334], [940.0, 837.5], [939.0, 847.4285714285714], [938.0, 747.0], [937.0, 785.5], [936.0, 933.0], [932.0, 882.0], [934.0, 809.5714285714286], [933.0, 833.6666666666666], [935.0, 831.0], [948.0, 732.0], [950.0, 713.6666666666666], [949.0, 803.0], [951.0, 885.0], [953.0, 699.0], [955.0, 855.6666666666666], [954.0, 832.5], [957.0, 886.0], [956.0, 864.0], [958.0, 449.6666666666667], [959.0, 1058.6666666666667], [945.0, 1223.5], [944.0, 768.0], [947.0, 798.0], [946.0, 833.0], [967.0, 673.25], [961.0, 873.1666666666666], [960.0, 823.4], [975.0, 972.75], [966.0, 947.0], [965.0, 880.0], [963.0, 809.2857142857143], [962.0, 818.5714285714286], [970.0, 810.5], [969.0, 1056.0], [968.0, 737.0], [971.0, 880.4285714285714], [973.0, 976.0], [972.0, 812.0], [974.0, 792.0], [979.0, 1005.5], [982.0, 964.0], [981.0, 923.6842105263158], [980.0, 1037.9166666666667], [983.0, 1044.0], [984.0, 955.5714285714286], [985.0, 903.5294117647059], [987.0, 831.5], [986.0, 895.8181818181819], [989.0, 891.5909090909093], [988.0, 1059.0], [991.0, 950.9166666666669], [976.0, 833.5], [978.0, 1138.0], [977.0, 1150.0], [990.0, 956.7222222222222], [993.0, 835.2352941176471], [995.0, 874.2307692307694], [997.0, 708.5], [998.0, 992.4303797468357], [999.0, 952.2941176470588], [1000.0, 635.8232845943744], [996.0, 1061.3333333333333], [992.0, 966.1428571428571], [1.0, 1026.0]], "isOverall": false, "label": "/user/search-4", "isController": false}, {"data": [[984.3810349934441, 642.1775695002726]], "isOverall": false, "label": "/user/search-4-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 12614.0, "minX": 1.744014327E12, "maxY": 4161581.0, "series": [{"data": [[1.744014328E12, 808577.0], [1.744014327E12, 156170.0], [1.74401433E12, 523716.0], [1.744014329E12, 1127593.0], [1.744014333E12, 2119781.0], [1.744014332E12, 1217496.0], [1.744014331E12, 1683973.0], [1.744014336E12, 3068463.0], [1.744014335E12, 2837713.0], [1.744014334E12, 2805201.0], [1.744014359E12, 132489.0], [1.744014358E12, 2096383.0], [1.744014349E12, 3504282.0], [1.744014348E12, 4020042.0], [1.744014347E12, 2524863.0], [1.744014352E12, 2682817.0], [1.744014351E12, 2321067.0], [1.74401435E12, 2571687.0], [1.744014354E12, 2330733.0], [1.744014353E12, 2642949.0], [1.744014357E12, 1897293.0], [1.744014356E12, 2471385.0], [1.744014355E12, 2678048.0], [1.744014338E12, 3805707.0], [1.744014337E12, 3121977.0], [1.744014341E12, 3436157.0], [1.74401434E12, 3809861.0], [1.744014339E12, 4161581.0], [1.744014344E12, 1143632.0], [1.744014343E12, 2550623.0], [1.744014342E12, 2826047.0], [1.744014346E12, 3913671.0], [1.744014345E12, 3197081.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.744014328E12, 110908.0], [1.744014327E12, 12614.0], [1.74401433E12, 93772.0], [1.744014329E12, 122570.0], [1.744014333E12, 389606.0], [1.744014332E12, 188734.0], [1.744014331E12, 144228.0], [1.744014336E12, 427924.0], [1.744014335E12, 461482.0], [1.744014334E12, 406266.0], [1.744014359E12, 40698.0], [1.744014358E12, 239904.0], [1.744014349E12, 398888.0], [1.744014348E12, 434588.0], [1.744014347E12, 471716.0], [1.744014352E12, 424830.0], [1.744014351E12, 502418.0], [1.74401435E12, 478618.0], [1.744014354E12, 357714.0], [1.744014353E12, 409360.0], [1.744014357E12, 233954.0], [1.744014356E12, 340102.0], [1.744014355E12, 438396.0], [1.744014338E12, 466956.0], [1.744014337E12, 447202.0], [1.744014341E12, 485996.0], [1.74401434E12, 461482.0], [1.744014339E12, 427448.0], [1.744014344E12, 174216.0], [1.744014343E12, 419832.0], [1.744014342E12, 448630.0], [1.744014346E12, 443394.0], [1.744014345E12, 344862.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.744014359E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 93.8679245283019, "minX": 1.744014327E12, "maxY": 2149.3135313531343, "series": [{"data": [[1.744014328E12, 369.65021459227444], [1.744014327E12, 93.8679245283019], [1.74401433E12, 1976.8375634517765], [1.744014329E12, 1015.2815533980585], [1.744014333E12, 717.9126450824677], [1.744014332E12, 1721.8474148802022], [1.744014331E12, 2149.3135313531343], [1.744014336E12, 552.9961067853171], [1.744014335E12, 526.2661165549257], [1.744014334E12, 643.8412419449322], [1.744014359E12, 949.2690058479535], [1.744014358E12, 955.0039682539689], [1.744014349E12, 607.7243436754165], [1.744014348E12, 483.9857612267248], [1.744014347E12, 538.9722502522708], [1.744014352E12, 535.1927170868368], [1.744014351E12, 470.2572240644242], [1.74401435E12, 547.1491795126801], [1.744014354E12, 602.6267465069864], [1.744014353E12, 592.7447674418611], [1.744014357E12, 870.8962360122075], [1.744014356E12, 634.597620713785], [1.744014355E12, 622.1237785016306], [1.744014338E12, 512.443934760449], [1.744014337E12, 531.141032464075], [1.744014341E12, 512.7340842311451], [1.74401434E12, 520.2934502320795], [1.744014339E12, 524.4844097995538], [1.744014344E12, 872.7062841530052], [1.744014343E12, 584.3027210884359], [1.744014342E12, 482.45145888594135], [1.744014346E12, 537.083199141169], [1.744014345E12, 937.5383022774316]], "isOverall": false, "label": "/user/search-4", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.744014359E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 93.77358490566037, "minX": 1.744014327E12, "maxY": 2149.267326732672, "series": [{"data": [[1.744014328E12, 369.61373390557924], [1.744014327E12, 93.77358490566037], [1.74401433E12, 1976.8172588832504], [1.744014329E12, 1014.5728155339809], [1.744014333E12, 717.8882101405004], [1.744014332E12, 1721.5977301387138], [1.744014331E12, 2149.267326732672], [1.744014336E12, 552.9760845383765], [1.744014335E12, 526.2470345538933], [1.744014334E12, 643.8265963678965], [1.744014359E12, 949.251461988304], [1.744014358E12, 954.9712301587299], [1.744014349E12, 607.6998806682576], [1.744014348E12, 483.9627601314337], [1.744014347E12, 538.9550958627658], [1.744014352E12, 535.1787114845931], [1.744014351E12, 470.2449076267174], [1.74401435E12, 547.1352560914968], [1.744014354E12, 602.6101131071187], [1.744014353E12, 592.7290697674418], [1.744014357E12, 870.8677517802646], [1.744014356E12, 634.5731280615795], [1.744014355E12, 622.1053203040178], [1.744014338E12, 512.4179408766565], [1.744014337E12, 531.127727514636], [1.744014341E12, 512.7154750244854], [1.74401434E12, 520.268695203714], [1.744014339E12, 524.4548997772836], [1.744014344E12, 872.677595628415], [1.744014343E12, 584.2834467120182], [1.744014342E12, 482.43501326259957], [1.744014346E12, 537.0552871712274], [1.744014345E12, 937.5155279503088]], "isOverall": false, "label": "/user/search-4", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.744014359E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.744014327E12, "maxY": 42.20050761421318, "series": [{"data": [[1.744014328E12, 0.41416309012875535], [1.744014327E12, 1.528301886792453], [1.74401433E12, 42.20050761421318], [1.744014329E12, 21.52427184466021], [1.744014333E12, 0.0], [1.744014332E12, 0.0], [1.744014331E12, 26.48679867986797], [1.744014336E12, 0.0], [1.744014335E12, 0.0], [1.744014334E12, 0.0], [1.744014359E12, 0.0], [1.744014358E12, 0.0], [1.744014349E12, 0.0], [1.744014348E12, 0.0], [1.744014347E12, 0.0], [1.744014352E12, 0.0], [1.744014351E12, 0.0], [1.74401435E12, 0.0], [1.744014354E12, 0.0], [1.744014353E12, 0.0], [1.744014357E12, 0.0], [1.744014356E12, 0.0], [1.744014355E12, 0.0], [1.744014338E12, 0.0], [1.744014337E12, 0.0], [1.744014341E12, 0.0], [1.74401434E12, 0.0], [1.744014339E12, 0.0], [1.744014344E12, 0.0], [1.744014343E12, 0.0], [1.744014342E12, 0.0], [1.744014346E12, 0.0], [1.744014345E12, 0.0]], "isOverall": false, "label": "/user/search-4", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.744014359E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 6.0, "minX": 1.744014327E12, "maxY": 2985.0, "series": [{"data": [[1.744014328E12, 786.0], [1.744014327E12, 132.0], [1.74401433E12, 2671.0], [1.744014329E12, 1708.0], [1.744014333E12, 1396.0], [1.744014332E12, 2789.0], [1.744014331E12, 2985.0], [1.744014336E12, 780.0], [1.744014335E12, 768.0], [1.744014334E12, 972.0], [1.744014359E12, 1004.0], [1.744014358E12, 1365.0], [1.744014349E12, 834.0], [1.744014348E12, 634.0], [1.744014347E12, 787.0], [1.744014352E12, 819.0], [1.744014351E12, 591.0], [1.74401435E12, 782.0], [1.744014354E12, 862.0], [1.744014353E12, 839.0], [1.744014357E12, 1137.0], [1.744014356E12, 889.0], [1.744014355E12, 941.0], [1.744014338E12, 724.0], [1.744014337E12, 714.0], [1.744014341E12, 742.0], [1.74401434E12, 756.0], [1.744014339E12, 779.0], [1.744014344E12, 1380.0], [1.744014343E12, 804.0], [1.744014342E12, 619.0], [1.744014346E12, 838.0], [1.744014345E12, 1459.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.744014328E12, 131.0], [1.744014327E12, 68.0], [1.74401433E12, 851.0], [1.744014329E12, 162.0], [1.744014333E12, 90.0], [1.744014332E12, 288.0], [1.744014331E12, 108.0], [1.744014336E12, 28.0], [1.744014335E12, 10.0], [1.744014334E12, 26.0], [1.744014359E12, 824.0], [1.744014358E12, 160.0], [1.744014349E12, 13.0], [1.744014348E12, 7.0], [1.744014347E12, 77.0], [1.744014352E12, 95.0], [1.744014351E12, 64.0], [1.74401435E12, 32.0], [1.744014354E12, 115.0], [1.744014353E12, 8.0], [1.744014357E12, 155.0], [1.744014356E12, 97.0], [1.744014355E12, 70.0], [1.744014338E12, 73.0], [1.744014337E12, 91.0], [1.744014341E12, 6.0], [1.74401434E12, 23.0], [1.744014339E12, 8.0], [1.744014344E12, 87.0], [1.744014343E12, 10.0], [1.744014342E12, 94.0], [1.744014346E12, 74.0], [1.744014345E12, 18.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.744014328E12, 699.6000000000001], [1.744014327E12, 132.0], [1.74401433E12, 2486.6], [1.744014329E12, 1565.0], [1.744014333E12, 1271.6], [1.744014332E12, 2543.0], [1.744014331E12, 2737.0], [1.744014336E12, 673.8], [1.744014335E12, 666.4000000000001], [1.744014334E12, 755.4000000000001], [1.744014359E12, 1004.0], [1.744014358E12, 1144.6], [1.744014349E12, 756.8], [1.744014348E12, 581.0], [1.744014347E12, 685.8000000000001], [1.744014352E12, 666.9], [1.744014351E12, 522.0], [1.74401435E12, 680.8000000000001], [1.744014354E12, 779.8000000000001], [1.744014353E12, 745.2], [1.744014357E12, 994.4000000000001], [1.744014356E12, 812.6], [1.744014355E12, 827.0], [1.744014338E12, 672.2], [1.744014337E12, 641.0], [1.744014341E12, 639.5], [1.74401434E12, 626.2], [1.744014339E12, 667.0], [1.744014344E12, 1236.6], [1.744014343E12, 786.4], [1.744014342E12, 556.5], [1.744014346E12, 663.0], [1.744014345E12, 1332.2]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.744014328E12, 786.0], [1.744014327E12, 132.0], [1.74401433E12, 2671.0], [1.744014329E12, 1708.0], [1.744014333E12, 1396.0], [1.744014332E12, 2789.0], [1.744014331E12, 2985.0], [1.744014336E12, 780.0], [1.744014335E12, 768.0], [1.744014334E12, 972.0], [1.744014359E12, 1004.0], [1.744014358E12, 1365.0], [1.744014349E12, 834.0], [1.744014348E12, 633.78], [1.744014347E12, 787.0], [1.744014352E12, 819.0], [1.744014351E12, 591.0], [1.74401435E12, 782.0], [1.744014354E12, 862.0], [1.744014353E12, 839.0], [1.744014357E12, 1137.0], [1.744014356E12, 889.0], [1.744014355E12, 941.0], [1.744014338E12, 724.0], [1.744014337E12, 714.0], [1.744014341E12, 737.6499999999999], [1.74401434E12, 756.0], [1.744014339E12, 779.0], [1.744014344E12, 1380.0], [1.744014343E12, 804.0], [1.744014342E12, 619.0], [1.744014346E12, 825.0799999999999], [1.744014345E12, 1459.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.744014328E12, 297.5], [1.744014327E12, 90.5], [1.74401433E12, 1998.5], [1.744014329E12, 956.5], [1.744014333E12, 657.5], [1.744014332E12, 1806.0], [1.744014331E12, 2252.0], [1.744014336E12, 579.0], [1.744014335E12, 586.0], [1.744014334E12, 667.5], [1.744014359E12, 967.5], [1.744014358E12, 946.0], [1.744014349E12, 630.0], [1.744014348E12, 492.5], [1.744014347E12, 562.0], [1.744014352E12, 556.0], [1.744014351E12, 466.0], [1.74401435E12, 551.0], [1.744014354E12, 624.0], [1.744014353E12, 641.0], [1.744014357E12, 855.5], [1.744014356E12, 699.0], [1.744014355E12, 701.5], [1.744014338E12, 560.0], [1.744014337E12, 555.0], [1.744014341E12, 527.5], [1.74401434E12, 535.5], [1.744014339E12, 551.0], [1.744014344E12, 925.0], [1.744014343E12, 630.0], [1.744014342E12, 487.0], [1.744014346E12, 550.5], [1.744014345E12, 833.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.744014328E12, 786.0], [1.744014327E12, 132.0], [1.74401433E12, 2614.2999999999997], [1.744014329E12, 1675.25], [1.744014333E12, 1303.6], [1.744014332E12, 2682.0], [1.744014331E12, 2883.0], [1.744014336E12, 710.3999999999996], [1.744014335E12, 694.0], [1.744014334E12, 851.6000000000001], [1.744014359E12, 1004.0], [1.744014358E12, 1182.6], [1.744014349E12, 804.2], [1.744014348E12, 595.25], [1.744014347E12, 728.4000000000001], [1.744014352E12, 678.45], [1.744014351E12, 540.5], [1.74401435E12, 735.65], [1.744014354E12, 790.25], [1.744014353E12, 787.3999999999999], [1.744014357E12, 1059.6499999999999], [1.744014356E12, 847.8], [1.744014355E12, 894.5], [1.744014338E12, 703.3999999999999], [1.744014337E12, 657.9], [1.744014341E12, 658.5], [1.74401434E12, 676.15], [1.744014339E12, 683.2], [1.744014344E12, 1288.7999999999995], [1.744014343E12, 797.1], [1.744014342E12, 592.25], [1.744014346E12, 691.05], [1.744014345E12, 1374.5999999999997]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.744014359E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 90.5, "minX": 53.0, "maxY": 2252.0, "series": [{"data": [[515.0, 956.5], [606.0, 2252.0], [732.0, 925.0], [793.0, 1806.0], [53.0, 90.5], [983.0, 855.5], [1008.0, 946.0], [1449.0, 833.0], [1429.0, 699.0], [1503.0, 624.0], [1637.0, 657.5], [1707.0, 667.5], [1676.0, 630.0], [1720.0, 641.0], [1764.0, 630.0], [1785.0, 556.0], [1798.0, 579.0], [1796.0, 551.0], [1826.0, 492.5], [1842.0, 701.5], [1879.0, 555.0], [1885.0, 487.0], [1863.0, 550.5], [1939.0, 561.0], [1962.0, 560.0], [1982.0, 562.0], [2042.0, 527.5], [2011.0, 551.0], [2111.0, 466.0], [171.0, 967.5], [394.0, 1998.5], [466.0, 297.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[515.0, 1010.0], [606.0, 2194.0], [732.0, 907.0], [793.0, 1725.5], [53.0, 95.0], [983.0, 886.0], [1008.0, 948.0], [1449.0, 850.0], [1429.0, 669.0], [1503.0, 630.0], [1637.0, 641.0], [1707.0, 653.0], [1676.0, 633.0], [1720.0, 614.0], [1764.0, 629.0], [1785.0, 553.0], [1798.0, 582.0], [1796.0, 570.0], [1826.0, 481.5], [1842.0, 693.0], [1879.0, 548.0], [1885.0, 495.0], [1863.0, 557.0], [1939.0, 558.0], [1962.0, 547.0], [1982.0, 573.0], [2042.0, 526.0], [2011.0, 578.0], [2111.0, 479.0], [171.0, 952.0], [394.0, 2126.0], [466.0, 296.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2111.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 90.5, "minX": 53.0, "maxY": 2250.0, "series": [{"data": [[515.0, 956.5], [606.0, 2250.0], [732.0, 924.0], [793.0, 1805.0], [53.0, 90.5], [983.0, 854.5], [1008.0, 944.0], [1449.0, 833.0], [1429.0, 697.0], [1503.0, 624.0], [1637.0, 657.5], [1707.0, 667.5], [1676.0, 629.0], [1720.0, 641.0], [1764.0, 630.0], [1785.0, 556.0], [1798.0, 579.0], [1796.0, 547.0], [1826.0, 492.5], [1842.0, 700.5], [1879.0, 555.0], [1885.0, 487.0], [1863.0, 549.5], [1939.0, 560.5], [1962.0, 558.5], [1982.0, 562.0], [2042.0, 527.5], [2011.0, 551.0], [2111.0, 466.0], [171.0, 967.0], [394.0, 1998.5], [466.0, 297.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[515.0, 1010.0], [606.0, 2194.0], [732.0, 907.0], [793.0, 1725.5], [53.0, 95.0], [983.0, 886.0], [1008.0, 948.0], [1449.0, 850.0], [1429.0, 669.0], [1503.0, 630.0], [1637.0, 641.0], [1707.0, 653.0], [1676.0, 633.0], [1720.0, 614.0], [1764.0, 629.0], [1785.0, 553.0], [1798.0, 582.0], [1796.0, 570.0], [1826.0, 481.0], [1842.0, 693.0], [1879.0, 548.0], [1885.0, 495.0], [1863.0, 557.0], [1939.0, 558.0], [1962.0, 547.0], [1982.0, 573.0], [2042.0, 526.0], [2011.0, 578.0], [2111.0, 479.0], [171.0, 952.0], [394.0, 2126.0], [466.0, 296.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2111.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 193.0, "minX": 1.744014327E12, "maxY": 2110.0, "series": [{"data": [[1.744014328E12, 1325.0], [1.744014327E12, 193.0], [1.74401433E12, 395.0], [1.744014329E12, 515.0], [1.744014333E12, 1637.0], [1.744014332E12, 794.0], [1.744014331E12, 605.0], [1.744014336E12, 1797.0], [1.744014335E12, 1939.0], [1.744014334E12, 1707.0], [1.744014358E12, 195.0], [1.744014349E12, 1676.0], [1.744014348E12, 1826.0], [1.744014347E12, 1982.0], [1.744014352E12, 1786.0], [1.744014351E12, 2110.0], [1.74401435E12, 2011.0], [1.744014354E12, 1503.0], [1.744014353E12, 1720.0], [1.744014357E12, 967.0], [1.744014356E12, 1429.0], [1.744014355E12, 1842.0], [1.744014338E12, 1961.0], [1.744014337E12, 1880.0], [1.744014341E12, 2042.0], [1.74401434E12, 1939.0], [1.744014339E12, 1797.0], [1.744014344E12, 732.0], [1.744014343E12, 1764.0], [1.744014342E12, 1885.0], [1.744014346E12, 1864.0], [1.744014345E12, 1448.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.744014358E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 4.0, "minX": 1.744014327E12, "maxY": 2022.0, "series": [{"data": [[1.744014328E12, 18.0], [1.744014327E12, 4.0], [1.74401433E12, 26.0], [1.744014329E12, 24.0], [1.744014333E12, 80.0], [1.744014332E12, 29.0], [1.744014331E12, 39.0], [1.744014336E12, 95.0], [1.744014335E12, 98.0], [1.744014334E12, 80.0], [1.744014359E12, 6.0], [1.744014358E12, 55.0], [1.744014349E12, 85.0], [1.744014348E12, 110.0], [1.744014347E12, 85.0], [1.744014352E12, 90.0], [1.744014351E12, 89.0], [1.74401435E12, 98.0], [1.744014354E12, 66.0], [1.744014353E12, 83.0], [1.744014357E12, 58.0], [1.744014356E12, 71.0], [1.744014355E12, 94.0], [1.744014338E12, 82.0], [1.744014337E12, 93.0], [1.744014341E12, 114.0], [1.74401434E12, 96.0], [1.744014339E12, 87.0], [1.744014344E12, 35.0], [1.744014343E12, 77.0], [1.744014342E12, 94.0], [1.744014346E12, 116.0], [1.744014345E12, 77.0]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.744014328E12, 448.0], [1.744014327E12, 49.0], [1.74401433E12, 368.0], [1.744014329E12, 491.0], [1.744014333E12, 1557.0], [1.744014332E12, 764.0], [1.744014331E12, 567.0], [1.744014336E12, 1703.0], [1.744014335E12, 1841.0], [1.744014334E12, 1627.0], [1.744014359E12, 165.0], [1.744014358E12, 953.0], [1.744014349E12, 1591.0], [1.744014348E12, 1716.0], [1.744014347E12, 1897.0], [1.744014352E12, 1695.0], [1.744014351E12, 2022.0], [1.74401435E12, 1913.0], [1.744014354E12, 1437.0], [1.744014353E12, 1637.0], [1.744014357E12, 925.0], [1.744014356E12, 1358.0], [1.744014355E12, 1748.0], [1.744014338E12, 1880.0], [1.744014337E12, 1786.0], [1.744014341E12, 1928.0], [1.74401434E12, 1843.0], [1.744014339E12, 1709.0], [1.744014344E12, 697.0], [1.744014343E12, 1687.0], [1.744014342E12, 1791.0], [1.744014346E12, 1747.0], [1.744014345E12, 1372.0]], "isOverall": false, "label": "404", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.744014359E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 4.0, "minX": 1.744014327E12, "maxY": 2022.0, "series": [{"data": [[1.744014328E12, 448.0], [1.744014327E12, 49.0], [1.74401433E12, 368.0], [1.744014329E12, 491.0], [1.744014333E12, 1557.0], [1.744014332E12, 764.0], [1.744014331E12, 567.0], [1.744014336E12, 1703.0], [1.744014335E12, 1841.0], [1.744014334E12, 1627.0], [1.744014359E12, 165.0], [1.744014358E12, 953.0], [1.744014349E12, 1591.0], [1.744014348E12, 1716.0], [1.744014347E12, 1897.0], [1.744014352E12, 1695.0], [1.744014351E12, 2022.0], [1.74401435E12, 1913.0], [1.744014354E12, 1437.0], [1.744014353E12, 1637.0], [1.744014357E12, 925.0], [1.744014356E12, 1358.0], [1.744014355E12, 1748.0], [1.744014338E12, 1880.0], [1.744014337E12, 1786.0], [1.744014341E12, 1928.0], [1.74401434E12, 1843.0], [1.744014339E12, 1709.0], [1.744014344E12, 697.0], [1.744014343E12, 1687.0], [1.744014342E12, 1791.0], [1.744014346E12, 1747.0], [1.744014345E12, 1372.0]], "isOverall": false, "label": "/user/search-4-failure", "isController": false}, {"data": [[1.744014328E12, 18.0], [1.744014327E12, 4.0], [1.74401433E12, 26.0], [1.744014329E12, 24.0], [1.744014333E12, 80.0], [1.744014332E12, 29.0], [1.744014331E12, 39.0], [1.744014336E12, 95.0], [1.744014335E12, 98.0], [1.744014334E12, 80.0], [1.744014359E12, 6.0], [1.744014358E12, 55.0], [1.744014349E12, 85.0], [1.744014348E12, 110.0], [1.744014347E12, 85.0], [1.744014352E12, 90.0], [1.744014351E12, 89.0], [1.74401435E12, 98.0], [1.744014354E12, 66.0], [1.744014353E12, 83.0], [1.744014357E12, 58.0], [1.744014356E12, 71.0], [1.744014355E12, 94.0], [1.744014338E12, 82.0], [1.744014337E12, 93.0], [1.744014341E12, 114.0], [1.74401434E12, 96.0], [1.744014339E12, 87.0], [1.744014344E12, 35.0], [1.744014343E12, 77.0], [1.744014342E12, 94.0], [1.744014346E12, 116.0], [1.744014345E12, 77.0]], "isOverall": false, "label": "/user/search-4-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.744014359E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 4.0, "minX": 1.744014327E12, "maxY": 2022.0, "series": [{"data": [[1.744014328E12, 18.0], [1.744014327E12, 4.0], [1.74401433E12, 26.0], [1.744014329E12, 24.0], [1.744014333E12, 80.0], [1.744014332E12, 29.0], [1.744014331E12, 39.0], [1.744014336E12, 95.0], [1.744014335E12, 98.0], [1.744014334E12, 80.0], [1.744014359E12, 6.0], [1.744014358E12, 55.0], [1.744014349E12, 85.0], [1.744014348E12, 110.0], [1.744014347E12, 85.0], [1.744014352E12, 90.0], [1.744014351E12, 89.0], [1.74401435E12, 98.0], [1.744014354E12, 66.0], [1.744014353E12, 83.0], [1.744014357E12, 58.0], [1.744014356E12, 71.0], [1.744014355E12, 94.0], [1.744014338E12, 82.0], [1.744014337E12, 93.0], [1.744014341E12, 114.0], [1.74401434E12, 96.0], [1.744014339E12, 87.0], [1.744014344E12, 35.0], [1.744014343E12, 77.0], [1.744014342E12, 94.0], [1.744014346E12, 116.0], [1.744014345E12, 77.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.744014328E12, 448.0], [1.744014327E12, 49.0], [1.74401433E12, 368.0], [1.744014329E12, 491.0], [1.744014333E12, 1557.0], [1.744014332E12, 764.0], [1.744014331E12, 567.0], [1.744014336E12, 1703.0], [1.744014335E12, 1841.0], [1.744014334E12, 1627.0], [1.744014359E12, 165.0], [1.744014358E12, 953.0], [1.744014349E12, 1591.0], [1.744014348E12, 1716.0], [1.744014347E12, 1897.0], [1.744014352E12, 1695.0], [1.744014351E12, 2022.0], [1.74401435E12, 1913.0], [1.744014354E12, 1437.0], [1.744014353E12, 1637.0], [1.744014357E12, 925.0], [1.744014356E12, 1358.0], [1.744014355E12, 1748.0], [1.744014338E12, 1880.0], [1.744014337E12, 1786.0], [1.744014341E12, 1928.0], [1.74401434E12, 1843.0], [1.744014339E12, 1709.0], [1.744014344E12, 697.0], [1.744014343E12, 1687.0], [1.744014342E12, 1791.0], [1.744014346E12, 1747.0], [1.744014345E12, 1372.0]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.744014359E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

