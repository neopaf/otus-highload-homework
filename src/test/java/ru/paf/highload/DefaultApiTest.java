/**
 * OTUS Highload Architect
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ru.paf.highload;

import java.math.BigDecimal;
import ru.paf.highload.DialogMessage;
import ru.paf.highload.DialogUserIdSendPostRequest;
import ru.paf.highload.LoginPost200Response;
import ru.paf.highload.LoginPost500Response;
import ru.paf.highload.LoginPostRequest;
import ru.paf.highload.Post;
import ru.paf.highload.PostCreatePostRequest;
import ru.paf.highload.PostUpdatePutRequest;
import ru.paf.highload.User;
import ru.paf.highload.UserRegisterPost200Response;
import ru.paf.highload.UserRegisterPostRequest;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Assertions;

import org.eclipse.microprofile.rest.client.RestClientBuilder;

import java.net.URL;
import java.net.MalformedURLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

/**
 * OTUS Highload Architect Test
 *
 * API tests for DefaultApi
 */
public class DefaultApiTest {

    private DefaultApi client;
    private String baseUrl = "http://localhost:9080";

    @BeforeEach
    public void setup() throws MalformedURLException {
        client = RestClientBuilder.newBuilder()
                        .baseUrl(new URL(baseUrl))
                        .register(ApiException.class)
                        .build(DefaultApi.class);
    }

    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dialogUserIdListGetTest() {
        // TODO: test validations
        String userId = null;
        //List<DialogMessage> response = api.dialogUserIdListGet(userId);
        //Assertions.assertNotNull(response);


    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dialogUserIdSendPostTest() {
        // TODO: test validations
        String userId = null;
        DialogUserIdSendPostRequest dialogUserIdSendPostRequest = null;
        //api.dialogUserIdSendPost(userId, dialogUserIdSendPostRequest);
        //Assertions.assertNotNull(response);


    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void friendDeleteUserIdPutTest() {
        // TODO: test validations
        String userId = null;
        //api.friendDeleteUserIdPut(userId);
        //Assertions.assertNotNull(response);


    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void friendSetUserIdPutTest() {
        // TODO: test validations
        String userId = null;
        //api.friendSetUserIdPut(userId);
        //Assertions.assertNotNull(response);


    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void loginPostTest() {
        // TODO: test validations
        LoginPostRequest loginPostRequest = null;
        //LoginPost200Response response = api.loginPost(loginPostRequest);
        //Assertions.assertNotNull(response);


    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postCreatePostTest() {
        // TODO: test validations
        PostCreatePostRequest postCreatePostRequest = null;
        //String response = api.postCreatePost(postCreatePostRequest);
        //Assertions.assertNotNull(response);


    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postDeleteIdPutTest() {
        // TODO: test validations
        String id = null;
        //api.postDeleteIdPut(id);
        //Assertions.assertNotNull(response);


    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postFeedGetTest() {
        // TODO: test validations
        BigDecimal offset = null;
        BigDecimal limit = null;
        //List<Post> response = api.postFeedGet(offset, limit);
        //Assertions.assertNotNull(response);


    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postGetIdGetTest() {
        // TODO: test validations
        String id = null;
        //Post response = api.postGetIdGet(id);
        //Assertions.assertNotNull(response);


    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postUpdatePutTest() {
        // TODO: test validations
        PostUpdatePutRequest postUpdatePutRequest = null;
        //api.postUpdatePut(postUpdatePutRequest);
        //Assertions.assertNotNull(response);


    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userGetIdGetTest() {
        // TODO: test validations
        String id = null;
        //User response = api.userGetIdGet(id);
        //Assertions.assertNotNull(response);


    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userRegisterPostTest() {
        // TODO: test validations
        UserRegisterPostRequest userRegisterPostRequest = null;
        //UserRegisterPost200Response response = api.userRegisterPost(userRegisterPostRequest);
        //Assertions.assertNotNull(response);


    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userSearchGetTest() {
        // TODO: test validations
        String firstName = null;
        String lastName = null;
        //List<User> response = api.userSearchGet(firstName, lastName);
        //Assertions.assertNotNull(response);


    }
    
}
